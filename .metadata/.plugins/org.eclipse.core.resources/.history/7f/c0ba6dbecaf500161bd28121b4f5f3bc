package SeverManager;

import DDS_Transfer.IDDS_Protocol;
import DDS_Transfer.IRecMsg;
import ProtocolsManager.ProtocolManager;


/**    
* 文件名：ServerManager.java    
*    
* 版本信息：    
* 日期：2017年1月12日    
* Copyright 足下 Corporation 2017     
* 版权所有    
*    
*/

/**    
*     
* 项目名称：ServerManagerCenter    
* 类名称：ServerManager    
* 类描述：     管理服务，初始化启动
*  新增服务向manager注册，客户端通过manager获取信息，或者传输数据
* 创建人：jinyu    
* 创建时间：2017年1月12日 上午12:04:01    
* 修改人：jinyu    
* 修改时间：2017年1月12日 上午12:04:01    
* 修改备注：    
* @version     
*     
*/
public class ServerManager {
	 IDDS_Protocol curObj =null;
	 IRecMsg recService =null;
	 IRecMsg recClientRequest =null;
	 IRecMsg recHeartBeat=null;
	 IRecMsg recFireInfo=null;//接收服务端穿墙成功
	 IRecMsg recTCPNat=null;
	 IRecMsg recUDPNat=null;//接收客户端穿墙请求,与recTCPNat不同
	 IDDS_Protocol recClientReq=null;
	 IDDS_Protocol recServerRsp=null;
	 IDDS_Protocol recClientBeat=null;
	 IDDS_Protocol recFire=null;
	 IDDS_Protocol recTCPPackage=null;
	 IDDS_Protocol recUDPClientNat=null;//接收客户端穿墙请求
	/**
	 * 
	* @Name: InitServiceRec 
	* @Description: 初始化接受服务端注册信息
	* @param ip  用于接受的IP
	* @param port  用于接收的端口
	* @param typeName  通讯类型 
	* @return void    返回类型 
	* @throws
	 */
public  void InitServiceRec(String ip,int port,String typeName)
{
	//InitPlugin.GetInstance().InitRecSeverInfo();
	 try {
		 recService=new RecviceService();
		 recServerRsp=(IDDS_Protocol)ProtocolManager.getInstance().CreateObject(typeName);
		 recServerRsp.RecData(ip+":"+port, recService);
	} catch (InstantiationException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IllegalAccessException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
}

/**
 * 
* @Name: InitClientRequest 
* @Description: 初始化接收客户端请求
* @param ip
* @param port
* @param typeName  参数说明 
* @return void    返回类型 
* @throws
 */
public void InitClientRequest(String ip,int port,String typeName)
{
	
	
	try {
		 recClientRequest=new RecviceClientRequest();
		 recClientReq=(IDDS_Protocol)ProtocolManager.getInstance().CreateObject(typeName);
		 recClientReq.RecData(ip+":"+port, recClientRequest);
		
	} catch (InstantiationException e) {
		
		e.printStackTrace();
	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	}

}
/**
 * 
* @Name: InitHeartBeat 
* @Description: 接收心跳
* @param ip
* @param port
* @param typeName  参数说明 
* @return void    返回类型 
* @throws
 */
public void InitHeartBeat(String ip,int port,String typeName)
{
	try {
		String addr=ip+":"+port;
		ManagerAddrInfo.hashMap.put("ManagerBeat", addr);
		recHeartBeat=new RecviceHeartbeat();
		recClientBeat=(IDDS_Protocol)ProtocolManager.getInstance().CreateObject(typeName);
		recClientBeat.RecData(addr, recHeartBeat);
		
	} catch (InstantiationException e) {
		
		e.printStackTrace();
	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	}
}
/**
 * 
* @Name: InitRecUDPNat 
* @Description: 接收客户端UDP穿墙请求
* @param ip 
* @param port
* @param typeName  参数说明 
* @return void    返回类型 
* @throws
 */
public void InitRecUDPNat(String ip,int port,String typeName)
{
	try {
		String addr=ip+":"+port;
		ManagerAddrInfo.hashMap.put("ManagerUDPWall", addr);
		recUDPNat=new RecviceClientUDPWall();
		recUDPClientNat=(IDDS_Protocol)ProtocolManager.getInstance().CreateObject(typeName);
		recUDPClientNat.RecData(addr, recHeartBeat);
		
	} catch (InstantiationException e) {
		
		e.printStackTrace();
	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	}
}
/**
 * 
* @Name: InitRecWallSucess 
* @Description: 接收UDP穿墙成功信息
* @param ip
* @param port
* @param typeName  参数说明 
* @return void    返回类型 
* @throws
 */
public void InitRecWallSucess(String ip,int port,String typeName)
{
	try {
		String addr=ip+":"+port;
		ManagerAddrInfo.hashMap.put("ManagerWallSucess", addr);
		recFireInfo=new RecviceWallSucess();
		recFire=(IDDS_Protocol)ProtocolManager.getInstance().CreateObject(typeName);
		recFire.RecData(addr, recFireInfo);
		
	} catch (InstantiationException e) {
		
		e.printStackTrace();
	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	}
}

/**
 * 
* @Name: InitRecTCPNat 
* @Description: TCP服务定时发送包给管理器，NAT保持信息
* @param ip
* @param port
* @param typeName  参数说明 
* @return void    返回类型 
* @throws
 */
public void InitRecTCPNat(String ip,int port,String typeName)
{
	try {
		String addr=ip+":"+port;
		ManagerAddrInfo.hashMap.put("ManagerTCPNat", addr);
		recTCPNat=new RecviceTCPNatPackage();
		recTCPPackage=(IDDS_Protocol)ProtocolManager.getInstance().CreateObject(typeName);
		recTCPPackage.RecData(addr, recTCPNat);
		
	} catch (InstantiationException e) {
		
		e.printStackTrace();
	} catch (IllegalAccessException e) {
		
		e.printStackTrace();
	}
}
}
