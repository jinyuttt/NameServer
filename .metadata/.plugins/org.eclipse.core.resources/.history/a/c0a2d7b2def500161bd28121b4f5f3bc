  
/**    
* 文件名：NetworkAll.java    
*    
* 版本信息：    
* 日期：2017年2月18日    
* Copyright 足下 Corporation 2017     
* 版权所有    
*    
*/  

package Tools;

import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Enumeration;

/**    
*     
* 项目名称：Com.Tools    
* 类名称：NetworkAll    
* 类描述：    获取所有IP
* 创建人：jinyu    
* 创建时间：2017年2月18日 下午12:22:31    
* 修改人：jinyu    
* 修改时间：2017年2月18日 下午12:22:31    
* 修改备注：    
* @version     
*     
*/
public class NetworkAll {
private  static ArrayList<String> listAll=new ArrayList<String>();

/**
 * 
* @Name: GetLocalAllIP 
* @Description: 获取所有IP
* @return  参数说明 
* @return ArrayList<String>    返回类型 
* @throws
 */
public static ArrayList<String> GetLocalAllIP()
{
	if(listAll.size()==0)
	{
	ArrayList<String> list=new ArrayList<String>();
	Enumeration<?> allNetInterfaces = null;
	try {
		allNetInterfaces = NetworkInterface.getNetworkInterfaces();
	} catch (SocketException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	InetAddress ip = null;
	while (allNetInterfaces.hasMoreElements())
	{
	NetworkInterface netInterface = (NetworkInterface) allNetInterfaces.nextElement();
	System.out.println(netInterface.getName());
	Enumeration<InetAddress> addresses = netInterface.getInetAddresses();
	while (addresses.hasMoreElements())
	{
	ip = (InetAddress) addresses.nextElement();
	if (ip != null && ip instanceof Inet4Address)
	{
		String ipaddr=ip.getHostAddress();
		list.add(ipaddr);
	  
	} 
	}
	}
	if(!list.contains("127.0.0.1"))
	{
		list.add("127.0.0.1");
	}
	listAll=list;
}
	return listAll;
 }

/**
 * 
* @Name: IsLocalIP 
* @Description: 判断是否包含该IP
* @param ip
* @return  参数说明 
* @return boolean    返回类型 
* @throws
 */
public static boolean IsLocalIP(String ip)
{
	if(listAll.size()==0)
	{
		GetLocalAllIP();
	}
	if(listAll.contains(ip))
	{
		return true;
	}
	else
	{
		return false;
	}
}
public static boolean internalIp(String ip) {
    byte[] addr = InetAddress.getByName(ip).getAddress(ip);
    return internalIp(addr);
}


public static boolean internalIp(byte[] addr) {
    final byte b0 = addr[0];
    final byte b1 = addr[1];
    //10.x.x.x/8
    final byte SECTION_1 = 0x0A;
    //172.16.x.x/12
    final byte SECTION_2 = (byte) 0xAC;
    final byte SECTION_3 = (byte) 0x10;
    final byte SECTION_4 = (byte) 0x1F;
    //192.168.x.x/16
    final byte SECTION_5 = (byte) 0xC0;
    final byte SECTION_6 = (byte) 0xA8;
    switch (b0) {
        case SECTION_1:
            return true;
        case SECTION_2:
            if (b1 >= SECTION_3 && b1 <= SECTION_4) {
                return true;
            }
        case SECTION_5:
            switch (b1) {
                case SECTION_6:
                    return true;
            }
        default:
            return false;

    }
}
}
